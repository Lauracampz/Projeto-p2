#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/time.h>
#define INICIOARRANJO   1
#define MAXTAM          100000
/****************

LAED1 - Projeto parte 2

Alunos(as): Laura Campos de Santana e Custodio Junio Queiroz

Data: 24/11/2022

****************/
/* ========================================================================= */

  //alocar





//TAD LISTA em arranjo do Ziviani:

/* ========================================================================== */

typedef int TipoChave;

typedef int TipoApontador;

typedef struct {
  TipoChave Chave;
  int tipo;
  int pontoMedio;
  /* outros componentes */
} TipoItem;

typedef struct {
  TipoItem Item[MAXTAM];
  TipoApontador Primeiro, Ultimo;
} TipoLista;

/* ========================================================================== */

void FLVazia(TipoLista *Lista)
{ Lista -> Primeiro = INICIOARRANJO;
  Lista -> Ultimo = Lista -> Primeiro;
}  /* FLVazia */

int Vazia(TipoLista Lista)
{ return (Lista.Primeiro == Lista.Ultimo);
}  /* Vazia */

void Insere(TipoItem x, TipoLista *Lista)
{ if (Lista -> Ultimo > MAXTAM) printf("Lista esta cheia\n");
  else { Lista -> Item[Lista -> Ultimo - 1] = x;
         Lista -> Ultimo++;
       }
}  /* Insere */

void Retira(TipoApontador p, TipoLista *Lista, TipoItem *Item)
{ int Aux;

  if (Vazia(*Lista) || p >= Lista -> Ultimo)
  { printf(" Erro   Posicao nao existe\n");
    return;
  }
  *Item = Lista -> Item[p - 1];
  Lista -> Ultimo--;
  for (Aux = p; Aux < Lista -> Ultimo; Aux++)
    Lista -> Item[Aux - 1] = Lista -> Item[Aux];
}  /* Retira */

void Imprime(TipoLista Lista)
{ int Aux;

  for (Aux = Lista.Primeiro - 1; Aux <= (Lista.Ultimo - 2); Aux++)
    printf("%d\n", Lista.Item[Aux].Chave);
}  /* Imprime */

/* ========================================================================== */


int main(int argc, char *argv[])
{
    TipoLista lista;
  TipoItem item;
  struct timeval t;
  gettimeofday(&t,NULL);
  srand((unsigned int)t.tv_usec);


    FLVazia(&lista);
    FILE *fp;
    char arquivo [500];
    int numElementos;
    //int numDiferentes=1;

    int padrao [5] = {1, 3, 2, 3, 1};
    int semPadrao=0;
    int *pontoMedioLinha;
    int linhas;

    printf("Digite o nome do arquivo: ");
    scanf("%s", arquivo);
    fp = fopen(arquivo,"r"); // Abre arquivo texto para leitura
    if(!fp)
    {
        printf("Erro na abertura do arquivo.\n");
        return 0;
    }

    // separando as informacoes
    fscanf(fp,"%i",&linhas);
     pontoMedioLinha=malloc( linhas * sizeof(int));

    int auxiliar=0;
    while(auxiliar<linhas){
        fscanf(fp,"%i",&numElementos);
        int *original;
        original = malloc( numElementos * sizeof(int));

        for(int i = 0; i < numElementos; i++){

            fscanf(fp,"%i",&*(original + i));

         }
         int qtdSeq=1;
         for(int i = 0; i < numElementos-1; i++){
            if(original[i]!= original[i+1]){
                qtdSeq++;
            }
         }
         int *vetorNum, *numEleSeq;
         int *pontosMedios;
         vetorNum=malloc( qtdSeq * sizeof(int));
         numEleSeq=malloc( qtdSeq * sizeof(int));
         pontosMedios=malloc( qtdSeq * sizeof(int));

         int p=1;
         vetorNum[0]=original[0];

         int u=1;
        while(u<qtdSeq){
        for(int i = 1; i < numElementos; i++)
        {
                if( original[i] != original[i-1] ){
                  vetorNum[u]=original[i];
                  pontosMedios[u]=i;
                  u++;
                }
            }

        }
        /*for(int i = 0; i < qtdSeq; i++)
        {
                 printf(" seg %i", vetorNum[i]);
            }*/

        for(int i = 0; i < qtdSeq; i++){

            switch ( vetorNum[i] )
            {
            case 0 :
            vetorNum[i]=1;
            break;

            case 128 :
            vetorNum[i]=2;
            break;

            case 255 :
            vetorNum[i]=3;
            break;
         }}

                 int z=0;
        int numSeq=1;

        for(int j = 0; j < numElementos; j++)
        {
                if(original[j]== original[j+1]){
                    numSeq++; // incrementando o numero de elementos na sequencia
                }
                else{
                    // colocando o numero de elementos de cada seq no vetor
                    numEleSeq[z]=numSeq;
                    z++;
                    numSeq=1;
                }
                if(z==p && original[j]!=original[j-1]){ // se diferente no ultimo elemento
                      numEleSeq[z]=numElementos-j;

                }

        }
                for(int i = 0; i < qtdSeq; i++){
            if(i==0){
                pontosMedios[i]= pontosMedios[i+1]/2;
            }
            else if(i==(qtdSeq-1)){
                // se ta no ultimo
                pontosMedios[i]= numEleSeq[i]/2;//(numElementos-pontosMedios[i])/2;
            }
            else{
                pontosMedios[i]=(numEleSeq[i]/2)+pontosMedios[i]; //(pontosMedios[i+1]-pontosMedios[i]+1)/2;
            }

         }

         for(int j = 0; j < qtdSeq; j++){

             item.Chave=(TipoChave)j;
             item.tipo= vetorNum[j];
             item.pontoMedio=pontosMedios[j];

             Insere(item,&lista);
        }

                int q=0;
        int o=0;
        int w=0;

        while(o < qtdSeq && w<qtdSeq ){

                if(vetorNum[o] == padrao[q]){
                    o++;
                    q++;

                }
                else if(q==5){
                        w=qtdSeq;

                }
                else{
                    q=0;
                }

                w++;

        }

        if(q >= 5){
            //printf("Resultado: Padrao encontrado.");
            //linha com padrao
            // procuro a parte vermelha e chamo o ponto medio

            for(int j = 0; j < qtdSeq; j++){

             if(vetorNum[j]==2){
                pontoMedioLinha[auxiliar]=pontosMedios[j];

             }
        }

        }
        else{
           // printf("Resultado: Padrao nao encontrado.");
           pontoMedioLinha[auxiliar]=-100; // linha sem o padrao

        }

        auxiliar++;
    }


    for(int j = 0; j < linhas; j++){

             if(pontoMedioLinha[j]==-100){
                semPadrao++;
             }
        }
        int aux2= (15-semPadrao);
        int comPadrao[aux2];
        int primeiro, fim;
        for(int j = 0; j < linhas; j++){

             if(pontoMedioLinha[j]!= -100){
                primeiro=pontoMedioLinha[j];
             }
        }
        for(int j = linhas-1; j > 0; j--){

             if(pontoMedioLinha[j]!= -100){
                fim=pontoMedioLinha[j];
             }
        }





       // double teste=(double)semPadrao/(double)linhas;
        int esquerda=0, direita=0;
        //printf("teste %d \n", teste);
        //printf("parae %i \n", semPadrao);
        for(int j = 0; j < aux2-1; j++){
             if(comPadrao[j]>comPadrao[j+1]){
                esquerda++;
             }
             else if(pontoMedioLinha[j]<pontoMedioLinha[j+1]){
                direita++;
             }
             /*printf("%i ", pontoMedioLinha[j]);
             printf("  j %i",j);
             printf("\n ");*/

        }

     //  printf("%i  aaaaa\n", primeiro-fim);

        if(semPadrao > 5){
			printf("Resultado: Formato da pista nao estimado.");
		}else if(primeiro-fim >= 66 ){
			printf("Resultado: Curva a esquerda.");
		}else if(primeiro-fim<= -66){
			printf("Resultado: Curva a direita.");
		}
		else{
            printf("Resultado: Pista em linha reta.");

		}


 }

